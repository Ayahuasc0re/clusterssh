=pod

=head1 NAME

ctel - Cluster administration tool

=head1 SYNOPSIS

S<< ctel [options] [<server>[:port]|<tag>] [...] >>

=head1 DESCRIPTION

The command opens an administration console and an xterm to all specified 
hosts.  Any text typed into the administration console is replicated to 
all windows.  All windows may also be typed into directly.

This tool is intended for (but not limited to) cluster administration where
the same configuration or commands must be run on each node within the
cluster.  Performing these commands all at once via this tool ensures all
nodes are kept in sync.

Connections are opened via ssh, so a correctly installed and configured
ssh installation is required.  If, however, the program is called by "crsh"
then the rsh protocol is used (and the communications channel is insecure),
or by "ctel" then telnet is used, or by "ccon" then console is used.

Extra caution should be taken when editing system files such as
/etc/inet/hosts as lines may not necessarily be in the same order.  Assuming
line 5 is the same across all servers and modifying that is dangerous.
It's better to search for the specific line to be changed and double-check
before changes are committed.

=head2 Further Notes

Please also see L</KNOWN BUGS>.

=over

=item *

The dotted line on any sub-menu is a tear-off, i.e. click on it
and the sub-menu is turned into its own window.

=item *

Unchecking a hostname on the Hosts sub-menu will unplug the host from the
cluster control window, so any text typed into the console is not sent to
that host.  Re-selecting it will plug it back in.

=item *

If your window manager menu bars are obscured by terminal windows see
the C<screen_reserve_XXXXX> options in the F<$HOME/.clusterssh/config> file (see L</"FILES">).

=item *

If the terminals overlap too much see the C<terminal_reserve_XXXXX> 
options in the F<$HOME/.clusterssh/config> file (see L</"FILES">).

=item *

If the code is called as crsh instead of cssh (i.e. a symlink called
crsh points to the cssh file or the file is renamed) rsh is used as the
communications protocol instead of ssh.

=item *

If the code is called as ctel instead of cssh (i.e. a symlink called
ctel points to the cssh file or the file is renamed) telnet is used as the
communications protocol instead of ssh.

=item *

If the code is called as ccon instead of cssh (i.e. a symlink called
ccon points to the cssh file or the file is renamed) console is used as the
communications protocol instead of ssh.

=item *

When using cssh on a large number of systems to connect back to a single
system (e.g. you issue a command to the cluster to scp a file from a given
location) and when these connections require authentication (i.e. you are
going to authenticate with a password), the sshd daemon at that location 
may refuse connects after the number specified by MaxStartups in 
sshd_config is exceeded.  (If this value is not set, it defaults to 10.)
This is expected behavior; sshd uses this mechanism to prevent DoS attacks
from unauthenticated sources.  Please tune sshd_config and reload the SSH
daemon, or consider using the ~/.ssh/authorized_keys mechanism for 
authentication if you encounter this problem.

=item *

If client windows fail to open, try running:

C<< cssh -e {single host name} >>

This will test the mechanisms used to open windows to hosts.  This could 
be due to either the C<-xrm> terminal option which enables C<AllowSendEvents> 
(some terminals do not require this option, other terminals have another 
method for enabling it - see your terminal documentation) or the 
C<ConnectTimeout> ssh option (see the configuration option C<-o> or file 
C<$HOME/.clusterssh/config> below to resolve this).

=back

=head1 OPTIONS

Some of these options may also be defined within the configuration file. 
Default options are shown as appropriate.

=====

%OPTIONS%

=====

=over

=item --action,-a '<command>'

Run the command in each session, e.g. C<-a 'vi /etc/hosts'> to drop straight
into a vi session.  NOTE: not all communications methods support this (ssh 
and rsh should, telnet and console will not).

=item --autoclose,-A <seconds>

Number of seconds to wait before closing finished terminal windows.

=item --autoquit,-q|--no-autoquit,-Q

Enable|Disable automatically quiting after the last client window has closed
(overriding the config file)

=item --cluster-file,-c <file>

Use supplied file as additional cluster file (see also L</"FILES">)

=item --config-file,-C <file>

Use supplied file as additional configuration file (see also L</"FILES">)

=item -d 

DEPRECATED.  See '--debug'.

=item -D 

DEPRECATED.  See '--debug'.

=item --debug [number].

Enable debugging.  Either a level can be provided or the option can be
repeated multiple times.  Maximum level is 4.

=item --evaluate,-e [user@]<hostname>[:port]

Display and evaluate the terminal and connection arguments to display any
potential errors.  The <hostname> is required to aid the evaluation.  

=item --font,-f "5x8"

Specify the font to use in the terminal windows. Use standard X font notation.

=item --help,-h|-?

Show basic help text, and exit

=item --list, -L

List available cluster tags.

=item --man,-H

Show full help text (the man page), and exit

=item --master,-M <master>

The console client program polls master as the primary server, rather than the
default set at compile time (typically ``console'').

=item --options,-o "-x -o ConnectTimeout=10" - for ssh connections

=item --options,-o ""                        - for rsh connections

Specify arguments to be passed to ssh or rsh when making the connection.  

B<NOTE:> any "generic" change to the method (e.g., specifying the ssh port to use)
should be done in the medium's own config file (see C<ssh_config> and 
F<$HOME/.ssh/config>).

=item --output-config,-u

Output the current configuration in the same format used by the 
F<$HOME/.clusterssh/config> file.

=item --port,-p <port>

Specify an alternate port for connections.

=item --show-history,-s

IN BETA: Show history within console window.  This code is still being 
worked upon, but may help some users.

=item --tag-file,-r <file>

Use supplied file as additional tag file (see also L</"FILES">)

=item --term-args,-t ""

Specify arguments to be passed to terminals being used

=item --tile,-g|--no-tile,-G 

Enable|Disable window tiling (overriding the config file)

=item --title,-T "CSSH"

Specify the initial part of the title used in the console and client windows

=item --unique-servers,-m

Connect to each host only once

=item --use_all_a_records,-A

If a hostname resolves to multiple IP addresses, toggle whether or not to 
connect to all of them, or just the first one (see also config file entry)

=item --username,-l $LOGNAME

Specify the default username to use for connections (if different from the
currently logged in user).  B<NOTE:> will be overridden by <user>@<host>

=item --version,-v

Show version information and exit

=back

=head1 ARGUMENTS

The following arguments are supported:

=over

=item [user@]<hostname>[:port] ...

Open an xterm to the given hostname and connect to the administration
console.  An optional port number can be used if sshd is not listening
on the standard port (i.e., not listening on port 22) and ssh_config cannot
be used.

=item <tag> ...

Open a series of xterms defined by <tag> in one of the supplementary
configuration files (see L</"FILES">).

Note: specifying a username on a cluster tag will override any usernames 
defined in the cluster

=back

=head1 KEY SHORTCUTS

The following key shortcuts are available within the console window, and all
of them may be changed via the configuration files.

=over

=item Control-q

Quit the program and close all connections and windows

=item Control-+

Open the 'Add Host(s) or Cluster(s)' dialogue box.  Multiple host or cluster 
names can be entered, separated by spaces.

=item Alt-n

Paste in the hostname part of the specific connection string to each 
client, minus any username or port, i.e.

C<< scp /etc/hosts server:files/<Alt-n>.hosts >>

would replace the <Alt-n> with the client's name in each window

=item Alt-r

Retile all the client windows

=back

=head1 EXAMPLES

=over

=item Open up a session to 3 servers

S<$ cssh server1 server2 server3>

=item Open up a session to a cluster of servers identified by the tag 'farm1' 
and give the controlling window a specific title, where the cluster is defined 
in one of the default configuration files

S<$ cssh -T 'Web Farm Cluster 1' farm1>

=item Connect to different servers using different login names.  NOTE: this can 
also be achieved by setting up appropriate options in the F<.ssh/config> file.
Do not close cssh when the last terminal exits.

S<$ cssh -Q user1@server1 admin@server2>

=item Open up a cluster defined in a non-default configuration file

S<$ cssh -c $HOME/cssh.config db_cluster>

=item Use telnet on port 2022 instead of ssh

S<$ ctel -p 2022 server1 server2>

=item Use rsh instead of ssh

S<$ crsh server1 server2>

=item Use console with master as the primary server instead of ssh

S<$ ccon -M master server1 server2>

=back

%FILES%

=head1 KNOWN BUGS

=over 4

=item 1.

Catering for IPv6 addresses is minimal.  This is due to a conflict 
between IPv6 addresses and port numbers within the same 
server definition since they both use the same separator, i.e. is the 
following just an IPv6 address, or an address + port number of 2323?

    2001:db8::1428:2323

Exactly - I cannot tell either.  The IPv6 address without a port is assumed
in those cases where it cannot be determined and a warning is issued.

Possible workarounds include:

=over 4

=item a.

Use square brackets around the IPv6 address, i.e. 
    [2001:db8::1428]:2323
or
    [2001:db8::1428:2323]
as appropriate so there is no ambiguity

=item b.

Use the full IPv6 address if also using a port number - the 8th colon
is assumed to be the port separator.

=item c.

Define the IPv6 address in your /etc/hosts file, DNS or other name service 
lookup mechanism and use the hostname instead of the address.

=back

=item 2. 

Swapping virtual desktops can cause a redraw of all the terminal windows.  This
is due to a lack of distinction within Tk between switching desktops and 
minimising/maximising windows.  Until Tk can tell the difference between the 
two events, there is no fix (apart from rewriting everything directly in X)

=back

Anyone with any good ideas to fix the above bugs is more than welcome to get
in touch and/or provide a patch.

=head1 REPORTING BUGS

=over 2

=item *

If you have issues running cssh, first try:

C<< cssh -e [user@]<hostname>[:port] >>

This performs two tests to confirm cssh is able to work properly with the
settings provided within the F<$HOME/.clusterssh/config> file (or internal defaults).

	1. Test the terminal window works with the options provided

	2. Test ssh works to a host with the configured arguments

Configuration options to watch for in ssh are

	- Doesn't understand "-o ConnectTimeout=10" - remove the option 
	  in the F<$HOME/.clusterssh/config> file

	- OpenSSH-3.8 using untrusted ssh tunnels - use "-Y" instead of "-X"
	  or use "ForwardX11Trusted yes' in ssh_config (if you change the
	  default ssh options from -x to -X)

=item *

If you require support, please run the following commands
and post it on the web site in the support/problems forum:

C<< perl -V >>

C<< perl -MTk -e 'print $Tk::VERSION,$/' >>

C<< perl -MX11::Protocol -e 'print $X11::Protocol::VERSION,$/' >>

C<< cat /etc/csshrc $HOME/.clusterssh/config >>

=item *

Using the debug switches (-d, -D, or -dD) will turn on debugging output.  
However, please only use this option with one host at a time, 
i.e. "cssh -d <host>" due to the amount of output produced (in both main 
and child windows).

=back

=head1 SEE ALSO

L<http://clusterssh.sourceforge.net/>,
C<ssh>,
L<Tk::overview>,
L<X11::Protocol>,
C<perl>

=head1 CREDITS

A web site for comments, requests, bug reports and bug fixes/patches is
available at L<http://clusterssh.sourceforge.net/>

=head1 AUTHOR

Duncan Ferguson, C<< <duncan_j_ferguson at yahoo.co.uk> >>

=head1 LICENSE AND COPYRIGHT

Copyright 1999-2010 Duncan Ferguson.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

1;
